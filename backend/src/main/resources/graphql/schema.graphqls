enum Role {
  MAKEUP
  HAIR
  MANAGER
  ADMIN
}

type Staff {
  id: ID!
  name: String!
  role: Role!
  email: String!
  password: String!
}

type Client {
  id: ID!
  name: String!
  phone: String!
}

type Service {
  id: ID!
  name: String!
  basePrice: Float!
}

type Rent {
  id: ID!
  staff: Staff!
  month: String!
  amount: Float!
  paidDate: String! # consider custom scalar Date
}

type ProductPurchase {
  id: ID!
  staff: Staff!
  productName: String!
  amountSpent: Float!
  date: String! # consider custom scalar Date
}

type Transaction {
  id: ID!
  client: Client!
  staff: Staff!
  service: Service!
  amountPaid: Float!
  percentageGiven: Float!
  percentageRecipient: Staff!
  date: String! # consider custom scalar Date
}

type Query {
  allStaff: [Staff!]!
  getStaffById(id: ID!): Staff

  allClients: [Client!]!
  getClientById(id: ID!): Client

  allServices: [Service!]!
  getServiceById(id: ID!): Service

  allRents: [Rent!]!
  getRentById(id: ID!): Rent

  allProductPurchases: [ProductPurchase!]!
  getProductPurchaseById(id: ID!): ProductPurchase

  allTransactions: [Transaction!]!
  getTransactionById(id: ID!): Transaction
}

type Mutation {
  deleteStaff(id: ID!): Boolean!
  login(email: String!, password: String!): LoginResponse!

  createStaff(name: String!, role: Role!, email: String!, password: String!): Staff

  createClient(name: String!, phone: String!): Client

  createService(name: String!, basePrice: Float!): Service

  createRent(
    staffId: ID!
    month: String!
    amount: Float!
    paidDate: String!
  ): Rent

  createProductPurchase(
    staffId: ID!
    productName: String!
    amountSpent: Float!
    date: String!
  ): ProductPurchase

  createTransaction(
    clientId: ID!
    staffId: ID!
    serviceId: ID!
    amountPaid: Float!
    percentageGiven: Float!
    percentageRecipientId: ID!
    date: String!
  ): Transaction
}

type LoginResponse {
  token: String!
  staff: Staff!
}
